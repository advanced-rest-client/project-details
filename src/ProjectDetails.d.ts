/**
 * DO NOT EDIT
 *
 * This file was automatically generated by
 *   https://github.com/Polymer/tools/tree/master/packages/gen-typescript-declarations
 *
 * To modify these typings, edit the source file(s):
 *   src/ProjectDetails.js
 */


// tslint:disable:variable-name Describing an API that's defined elsewhere.
// tslint:disable:no-any describes the API as best we are able today

import {html} from 'lit-element';

import {ProjectBase} from './ProjectBase.js';

export {ProjectDetails};

declare namespace UiElements {

  /**
   * A project details panel for the Advanced REST Client.
   *
   * Contains complete UI to display ARC's legacy projects.
   *
   * This element contains logic for handling request and project data
   * (`arc-models`).
   *
   * It doesn't support data export. It must be used with another element
   * that handles `export-data` custom event.
   *
   * The element dispatches `navigate` custom event when the navigation occures.
   * Hosting application shouls handle the event and navigate the used into
   * requested place.
   *
   * ### Example
   *
   * ```html
   * <project-details project-id="some-id"></project-details>
   * ```
   *
   * ### Styling
   *
   * `<project-details>` provides the following custom properties and mixins
   * for styling:
   *
   * Custom property | Description | Default
   * ----------------|-------------|----------
   * `--project-details` | Mixin applied to the element | `{}`
   * `--project-details-description-button-color` | Color od the add description button | `--primary-color`
   * `--project-details-description-color` | Color of the project description text | `rgba(0, 0, 0, 0.74)`
   * `--project-details-description-max-width` | Max width of the project description | `700px`
   * `--project-details-fab-background-color` | Color of the fab button in the details panel | `--primary-color`
   * `--empty-info` | Theme mixin, applied to the "empty info" message | `{}`
   * `--project-details-description-empty` | Mixin applied to the "empty info" message | `{}`
   * `--project-details-description` | Description of the project | `{}`
   * `--project-details-description-container` Container of the description of the project | `{}`
   * `--project-details-header` | Mixin applied to the header section | `{}`
   * `--project-details-editor` | Mixin applied to the project editor | `{}`
   * `--project-details-bottom-sheet` | Mixin apllied to the `<bottom-sheet>` elements | `{}`
   * `--context-menu-item-color` | Color of the dropdown menu items | ``
   * `--context-menu-item-background-color` | Background olor of the dropdown menu items | ``
   * `--context-menu-item-color-hover` | Color of the dropdown menu items when hovering | ``
   * `--context-menu-item-background-color-hover` | Background olor of the dropdown menu items when hovering | ``
   * `--bottom-sheet-width` | Width of the `<bottom-sheet>` element | `100%`
   * `--bottom-sheet-max-width` | Max width of the `<bottom-sheet>` element | `700px`
   * `--project-details-bottom-sheet-right` | Right position of the `<bottom-sheet>` element | `40px`
   * `--project-details-bottom-sheet-left` | Left position of the `<bottom-sheet>` element | `auto`
   * `--warning-dialog-button-color` | Button color of the warning dialog | `#fff`
   * `--warning-dialog-button-background-color` | Button background color of the warning dialog | `transparent`
   * `--warning-primary-color` | Main color of the warning messages | `#FF7043`
   * `--warning-contrast-color` | Contrast color for the warning color | `#fff`
   * `--error-toast` | Mixin applied to the error toast | `{}`
   */
  class ProjectDetails extends ProjectBase {

    /**
     * Project datastore ID to display.
     */
    projectId: string|null|undefined;
    readonly modelTemplate: any;
    readonly requestModel: any;
    readonly projectModel: any;
    readonly _requestDetails: any;
    readonly _requestEditor: any;
    readonly _list: any;
    readonly requests: any;

    /**
     * Retreived from the data store project data.
     */
    project: object|null|undefined;

    /**
     * Set to true to enable project editor.
     */
    editOpened: boolean|null|undefined;

    /**
     * True when the project data are being loaded
     */
    _loadingProject: boolean|null|undefined;

    /**
     * When set the project metadata editor is opened.
     */
    editorOpened: boolean|null|undefined;

    /**
     * When set the project metadata preview is opened.
     */
    detailsOpened: boolean|null|undefined;

    /**
     * When set the element won't request projects list when attached to the dom.
     * This is passed to the request editor.
     */
    noAutoProjects: boolean|null|undefined;

    /**
     * When set is enables encryption options.
     * Currently only in the export panel.
     */
    withEncrypt: boolean|null|undefined;

    /**
     * Indicates that the export options panel is currently rendered.
     */
    _exportOptionsOpened: boolean|null|undefined;
    _exportOptions: object|null|undefined;
    constructor();
    connectedCallback(): void;
    disconnectedCallback(): void;
    firstUpdated(): void;
    render(): any;
    _addDndEvents(): void;
    _removeDndEvents(): void;

    /**
     * Updates project info when `projectId` changed.
     *
     * @param projectId Project data store id.
     */
    _projectIdChanged(projectId: String|null): Promise<any>|null;

    /**
     * Handles items delete event the list
     */
    _deleteSelected(e: CustomEvent|null): Promise<any>|null;

    /**
     * Deletes a request from the details panel.
     */
    _deleteRequestDetails(): Promise<any>|null;

    /**
     * Performs a delete action of request items.
     *
     * @param items List of deleted items.
     * @param opts If `skipRevert` is true it ignores "revert" logic
     */
    _delete(items: Array<object|null>|null, opts: object|null): Promise<any>|null;

    /**
     * Restores removed requests.
     * It does nothing if `_latestDeleted` is not set or empty.
     *
     * @returns A promise resolved when objects were restored
     */
    revertDeleted(): Promise<any>|null;

    /**
     * Removes selection from screen's main menu dropdown
     */
    _deselectMainMenu(): void;

    /**
     * Toggles export options panel and sets export items to all currently loaded requests.
     */
    openExportAll(): void;
    _cancelExportOptions(): void;

    /**
     * Creates export file for all items.
     *
     * @returns Result of calling `_doExportItems()`
     */
    _exportAllFile(): Promise<any>|null;

    /**
     * Handler for `accept` event dispatched by export options element.
     *
     * @returns Result of calling `_doExportItems()`
     */
    _acceptExportOptions(e: CustomEvent|null): Promise<any>|null;

    /**
     * Calls `_dispatchExportData()` from requests lists mixin with
     * prepared arguments
     *
     * @param requests List of request to export with the project.
     * @param detail Export configuration
     */
    _doExportItems(requests: Array<object|null>|null, detail: String|null): Promise<any>|null;
    _onExportSelected(e: any): void;

    /**
     * Updates project object to include only selected requests.
     * The requests list can be all of them. In this case it uses the same list.
     * If requests size is different than the projects requests then it iterates
     * over the array and removes IDs that are not available on the `requests`
     * list.
     *
     * @param requests List of requests being exported.
     * @returns Project definition to export.
     * This is a copy of current project.
     */
    _projectForRequests(requests: Array<object|null>|null): object|null;

    /**
     * Dispatches `export-data` event and returns it.
     *
     * @param requests List of request to export.
     * @param project Project object to export
     */
    _dispatchExportData(requests: Array<object|null>|null, project: object|null, opts: object|null): CustomEvent|null;

    /**
     * Generates export file name based on current project name.
     *
     * @returns File name for export.
     */
    _generateFileName(): String|null;

    /**
     * Toogles project details editor
     */
    toggleEdit(): void;

    /**
     * Handler to project edit cancel event
     */
    _cancelEdit(): void;

    /**
     * Handler to project edit save event
     */
    _saveEdit(e: any): any;

    /**
     * Handler for the `project-object-deleted` event.
     */
    _projectDeleteHandler(e: CustomEvent|null): void;

    /**
     * Opens the warning dialog to delete the project.
     */
    _deleteProject(): void;

    /**
     * Called when the delete warning dialog closes.
     *
     * The function removes requests that exclusively belongs to this project
     * and updates the requests that contains this project and some other.
     * Finally it removes the project.
     * Each of the actions is separate action based on events API.
     */
    _deleteDialogResult(e: CustomEvent|null): Promise<any>|null;
    _separateProjectRequests(requests: any, projectId: any): any;

    /**
     * Opens the request details applet with the request.
     */
    _onDetails(e: CustomEvent|null): void;

    /**
     * Fires `navigate` event for currently loaded in the details request.
     */
    _loadRequestDetails(): void;

    /**
     * Opens request details editor in place of the request details applet.
     */
    _editRequestDetails(): void;
    _cancelRequestEdit(): void;

    /**
     * Closes editor when saving request
     */
    _saveRequestEdit(): void;
    _resizeSheetContent(e: any): void;
    _updateExportFile(): void;

    /**
     * Dispatches bubbling and composed custom event.
     * By default the event is cancelable until `cancelable` property is set to false.
     *
     * @param type Event type
     * @param detail A detail to set
     */
    _dispatch(type: String|null, detail: any|null): CustomEvent|null;

    /**
     * Handler for the `project-object-changed` event.
     *
     * @returns False if the event was not handled.
     */
    _projectChanged(e: CustomEvent|null): Boolean|null;

    /**
     * Handler for `dragover` event on this element. If the dagged item is compatible
     * it renders drop message.
     */
    _dragoverHandler(e: DragEvent|null): void;

    /**
     * Handler for `drag` event on this element. If the dagged item is compatible
     * it adds request to saved requests.
     */
    _dropHandler(e: DragEvent|null): void;

    /**
     * Updates project and request objects and inserts the request at a position.
     *
     * @param index The position in requests order
     * @param request Request to update
     * @param forceRequestUpdate Forces update on request object even
     * when position hasn't change.
     */
    _insertRequestAt(index: Number|null, request: object|null, forceRequestUpdate: Boolean|null): Promise<any>|null;
    _headerTemplate(project: any): any;
    _descriptionTemplate(project: any): any;
    _listTemplate(project: any): any;
    _requestDetailsTemplate(): any;
    _requestEditorTemplate(): any;
    _exportOptionsTemplate(): any;
    _editProjectTemplate(project: any): any;
    _toastsTemplate(): any;
    _clearDialogTemplate(): any;
  }
}
