/**
 * DO NOT EDIT
 *
 * This file was automatically generated by
 *   https://github.com/Polymer/tools/tree/master/packages/gen-typescript-declarations
 *
 * To modify these typings, edit the source file(s):
 *   src/ProjectRequestsList.js
 */


// tslint:disable:variable-name Describing an API that's defined elsewhere.
// tslint:disable:no-any describes the API as best we are able today

import {LitElement, html} from 'lit-element';

import {RequestsListMixin} from '@advanced-rest-client/requests-list-mixin/requests-list-mixin.js';

import {AnypointMenuMixin} from '@anypoint-web-components/anypoint-menu-mixin/anypoint-menu-mixin.js';

import {ProjectBase} from './ProjectBase.js';

export {ProjectRequestsWrapper};

declare class ProjectRequestsWrapper {
  render(): any;
}

export {ProjectRequestsList};

declare namespace UiElements {

  /**
   * A list of requests in the project details view.
   *
   * The list doesn't offer any logic related to data models. Actions peformed
   * by the user have to be handled by event handlers and performed in
   * hosting application.
   *
   * Note: **All events fired by this element do not bubbles**.
   *
   * ### Example
   *
   * ```html
   * <project-requests-list items="[...]"></project-requests-list>
   * ```
   *
   * ```javascript
   * document.querySelector('project-requests-list')
   * .addEventListener('list-items-delete', function(e) {
   *  console.log('Items to delete:', e.detail.items);
   * });
   * ```
   *
   * ### Styling
   *
   * `<project-requests-list>` provides the following custom properties and
   * mixins for styling:
   *
   *
   * Custom property | Description | Default
   * ----------------|-------------|----------
   * `--project-requests-list-item-selected-background-color` | Background color of selected item | `#E0E0E0`
   * `--secondary-action-button-color` | Color of the secondary action button | `--primary-color`
   * `--primary-color` | Color of the secondary action buttons | ``
   * `--project-requests-list-item-dragging-background-color` | Item bg color when dragging | `#fff`
   * * `--context-menu-item-color` | Color of the dropdown menu items | ``
   * `--context-menu-item-background-color` | Background olor of the dropdown menu items | ``
   * `--context-menu-item-color-hover` | Color of the dropdown menu items when hovering | ``
   * `--context-menu-item-background-color-hover` | Background olor of the dropdown menu items when hovering | ``
   */
  class ProjectRequestsList extends
    RequestsListMixin(
    Object) {
    readonly _list: any;

    /**
     * If true, the user selected some elements on list. Check the
     * `this.selectedItems` property to check for the selected elements.
     *    
     */
    readonly hasSelection: any;

    /**
     * List of selected items on the list.
     */
    selectedItems: Array<object|null>|null;
    readonly dataUnavailable: any;

    /**
     * Project's datastore ID.
     * When setting `project` property this ptoperty is updated automatically.
     */
    projectId: string|null|undefined;

    /**
     * A project object related to the list of requests.
     * It is required property when using drag and drop.
     * When project object changes related `projectId` property also changes
     * and this triggest querying for requests list.
     */
    project: object|null|undefined;

    /**
     * A list of indexes of the `requests` array that are currently selected.
     */
    selectedIndexes: Array<Number|null>|null;

    /**
     * True to select all elements on the list
     */
    allSelected: boolean|null|undefined;
    connectedCallback(): void;
    disconnectedCallback(): void;
    _addDndEvents(): void;
    _removeDndEvents(): void;
    clearSelection(): void;
    loadRequests(): void;

    /**
     * Queries for the data when state or `projectId` changes
     */
    _queryData(): any;

    /**
     * Informs hosting application to delete currently selected items.
     */
    _deleteSelected(): void;

    /**
     * When selection is set it calls `_dispatchExport()` event with list
     * of items to export.
     */
    _onExportSelected(): void;

    /**
     * Dispatches `list-items-export` event.
     * The event do not bubble.
     *
     * @param items List of items to export.
     * @returns e
     */
    _dispatchExport(items: Array<object|null>|null): CustomEvent|null;

    /**
     * Closes list menu and resets its selection.
     */
    _deselectMenu(): void;

    /**
     * Handler for click action on the "open" button
     */
    _navigateItem(e: ClickEvent|null): void;

    /**
     * Called to request details panel for the list item
     */
    _requestDetails(e: any): void;

    /**
     * Removes drop pointer from shadow root.
     */
    _removeDropPointer(): void;

    /**
     * Adds drop pointer to shadow root.
     *
     * @param ref A list item to be used as a reference point.
     */
    _createDropPointer(ref: Element|null): void;

    /**
     * Handler for `dragover` event on this element. If the dagged item is compatible
     * it renders drop message.
     */
    _dragoverHandler(e: DragEvent|null): void;

    /**
     * Handler for `dragleave` event on this element.
     */
    _dragleaveHandler(e: DragEvent|null): void;

    /**
     * Handler for `drag` event on this element. If the dagged item is compatible
     * it adds request to saved requests.
     */
    _dropHandler(e: DragEvent|null): void;

    /**
     * Updates project and request objects and inserts the request at a position.
     *
     * @param index The position in requests order
     * @param request Request to update
     * @param forceRequestUpdate Forces update on request object even
     * when position hasn't change.
     */
    _insertRequestAt(index: Number|null, request: object|null, forceRequestUpdate: Boolean|null): Promise<any>|null;

    /**
     * Handler for the `dragstart` event added to the list item when `draggableEnabled`
     * is set to true.
     * This function sets request data on the `dataTransfer` object with `arc/request-object`
     * mime type. The request data is a serialized JSON with request model.
     */
    _dragStart(e: Event|null): void;
    _selectedHandler(e: any): void;

    /**
     * Toggles selection of of all itmes on the list.
     */
    _toggleSelectAll(e: Event|null): void;
    _searchHandler(e: any): void;

    /**
     * Filter function for the table.
     *
     * @param item Request item.
     * @returns True when the item should be rendered given current `keyword`.
     */
    _filterView(item: object|null): Boolean|null;
    _toastsTemplate(): any;
    _headerTemplate(): any;
    _selectionTemplate(): any;
    _unavailableTemplate(): any;
    _listTemplate(): any;
    _listItemDetailsTemplate(item: any): any;
    render(): any;
  }
}
